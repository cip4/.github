name: Tool Release

on:
  workflow_call:
    inputs:
      confluence-label:
        description: Label to attach to the binaries uplaoded to confluence.
        required: true
        type: string
      confluence-content-id:
        description: ID of the confluence page to attach the snapshot to.
        required: true
        type: number
      apple-bundle-id:
        description: BundleID to use when notarizing the MacOS build.
        required: true
        type: string
      java-version:
        description: Java version to use for building.
        required: false
        type: number
        default: 15
      java-distribution:
        description: Java distribution to use for building.
        required: false
        type: string
        default: 'adopt'
      docker-build:
        description: Flag if docker image should be build and published
        required: false
        type: boolean
        default: false
    secrets:
      APPLE_PASSWORD:
        required: true
      APPLE_CERTIFICATE:
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        required: true
      ATLASSIAN_USER:
        required: true
      ATLASSIAN_TOKEN:
        required: true
      CODE_SIGN_CERTIFICATE:
        required: true
      CODE_SIGN_PASSWORD:
        required: true
      CODE_SIGN_SHA1:
        required: true
      DOCKER_HUB_USERNAME:
        required: false
      DOCKER_HUB_PASSWORD:
        required: false

defaults:
  run:
    shell: bash
jobs:
  extract-info:
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources...
        uses: actions/checkout@v3

      - name: Retrieve Project Name
        id: retrieveProject
        run: |
          PROJECT=$(cat settings.gradle | grep -o -P "(?<=rootProject.name = ').*(?=')")
          PROJECT_ESCAPED=$(printf %q "$PROJECT")
          PROJECT_HANDLE=$(echo "$PROJECT" | sed "s/CIP4 //" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=PROJECT::$PROJECT"
          echo "::set-output name=PROJECT_ESCAPED::$PROJECT_ESCAPED"
          echo "::set-output name=PROJECT_HANDLE::$PROJECT_HANDLE"
    outputs:
      PROJECT: ${{ steps.retrieveProject.outputs.PROJECT }}
      PROJECT_ESCAPED: ${{ steps.retrieveProject.outputs.PROJECT_ESCAPED }}
      PROJECT_HANDLE: ${{ steps.retrieveProject.outputs.PROJECT_HANDLE }}

  linux-build:
    runs-on: ubuntu-latest
    needs:
      - extract-info
    env:
      PROJECT: ${{ needs.extract-info.outputs.PROJECT }}
      PROJECT_ESCAPED: ${{ needs.extract-info.outputs.PROJECT_ESCAPED }}
    steps:
      - name: Check out sources...
        uses: actions/checkout@v3

      - name: Setup JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'

      - name: Build with Gradle
        run: ./gradlew test distZip distTar -PprojectVersion="${GITHUB_REF/refs\/tags\//}" --no-daemon

      - name: Rename .ZIP
        run: mv build/distributions/${{ env.PROJECT_ESCAPED }}-*.zip "build/distributions/${{ env.PROJECT }}-${GITHUB_REF/refs\/tags\//}.zip" || true

      - name: Rename .TAR
        run: mv build/distributions/${{ env.PROJECT_ESCAPED }}-*.tar "build/distributions/${{ env.PROJECT }}-${GITHUB_REF/refs\/tags\//}.tar" || true

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: build/distributions/${{ env.PROJECT }}-*.*

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/distributions/${{ env.PROJECT }}-*.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  macos-build:
    runs-on: macos-latest
    needs:
      - extract-info
    env:
      PROJECT: ${{ needs.extract-info.outputs.PROJECT }}
      PROJECT_ESCAPED: ${{ needs.extract-info.outputs.PROJECT_ESCAPED }}
    steps:
      - name: Check out sources...
        uses: actions/checkout@v3

      - name: Setup JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'
          check-latest: true

      - name: Setup Tooling
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE}}
          P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build with Gradle
        run: ./gradlew test jpackage -PprojectVersion="${GITHUB_REF/refs\/tags\//}" --no-daemon

      - name: ✏️Notarize
        env:
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD}}
          NOTARIZE_PATH: ./build/jpackage/${{ env.PROJECT }}.dmg
          BUNDLE_ID: ${{ inputs.apple-bundle-id }}
        run: |
          echo '
          {
            "notarize": [
              {
                "path": "${{ env.NOTARIZE_PATH }}",
                "bundle_id": "${{ env.BUNDLE_ID }}",
                "staple": true
              }
            ],
            "apple_id": {
              "username": "infrastructure@cip4.org",
              "password": "@env:APPLE_PASSWORD"
            }
          }' > gon-notarize.json
          mv ./build/jpackage/${{ env.PROJECT_ESCAPED }}-*.dmg "${{ env.NOTARIZE_PATH }}"
          gon gon-notarize.json
          mv "${{ env.NOTARIZE_PATH }}" "build/jpackage/${{ env.PROJECT }}-${GITHUB_REF/refs\/tags\//}.dmg"

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: build/jpackage/${{ env.PROJECT }}-*.dmg

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/jpackage/${{ env.PROJECT }}-*.dmg
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  windows-build:
    runs-on: windows-latest
    needs:
      - extract-info
    env:
      PROJECT: ${{ needs.extract-info.outputs.PROJECT }}
      PROJECT_ESCAPED: ${{ needs.extract-info.outputs.PROJECT_ESCAPED }}
    steps:
      - name: Check out sources...
        uses: actions/checkout@v3

      - name: Setup JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'
          check-latest: true

      - name: Build with Gradle
        run: ./gradlew test jpackage -PprojectVersion="${GITHUB_REF/refs\/tags\//}" --no-daemon

      - name: Sign MSI
        env:
          BUILD_CERTIFICATE: ${{ secrets.CODE_SIGN_CERTIFICATE }}
          BUILD_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGN_PASSWORD }}
          CERTIFICATE_SHA1: ${{ secrets.CODE_SIGN_SHA1 }}
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path certificate
          $env:BUILD_CERTIFICATE | Out-File certificate\certificate.pem
          certutil -decode certificate\certificate.pem certificate\certificate.pfx

          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' --% sign /f certificate\certificate.pfx /sha1 %CERTIFICATE_SHA1% /d "Installer for ${{ env.PROJECT }}" /p %BUILD_CERTIFICATE_PASSWORD% /v /fd SHA256 /tr "http://timestamp.digicert.com/" /td SHA256 "build/jpackage/${{ env.PROJECT }}-*.msi"

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: build/jpackage/${{ env.PROJECT }}-*.msi

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/jpackage/${{ env.PROJECT }}-*.msi
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  docker-build:
    runs-on: ubuntu-latest
    if: ${{ inputs.docker-build }}
    needs:
      - extract-info
    env:
      PROJECT: ${{ needs.extract-info.outputs.PROJECT }}
      PROJECT_HANDLE: ${{ needs.extract-info.outputs.PROJECT_HANDLE }}
      SERVICE_NAME: ${{ needs.extract-info.outputs.PROJECT_HANDLE }}-cip4-org
      RUN_REGION: europe-west1
    steps:
      - name: Check out sources...
        uses: actions/checkout@v3

      - name: Build docker container
        run: |-
          docker build \
            -t cip4/${PROJECT_HANDLE}:${GITHUB_REF##*/} \
            --build-arg VERSION=${GITHUB_REF##*/} \
            --build-arg BUILD_NUMBER=${GITHUB_RUN_NUMBER} \
            --build-arg GIT_REV=${GITHUB_SHA} \
            .

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push Docker Container
        run: docker push cip4/${PROJECT_HANDLE}:${GITHUB_REF##*/}

  publish:
    runs-on: ubuntu-latest
    needs:
      - extract-info
      - linux-build
      - macos-build
      - windows-build
    env:
      PROJECT: ${{ needs.extract-info.outputs.PROJECT }}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: binaries
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: binaries
      - name: Confluence Upload
        uses: cip4/action-confluence-upload@master
        with:
          url: 'https://cip4.atlassian.net/wiki'
          username: ${{ secrets.ATLASSIAN_USER }}
          password: ${{ secrets.ATLASSIAN_TOKEN }}
          contentId: ${{ inputs.confluence-content-id }}
          label: '${{ inputs.confluence-label }}-release,release'
          filePattern: 'binaries/**/${{ env.PROJECT }}-*.*'
